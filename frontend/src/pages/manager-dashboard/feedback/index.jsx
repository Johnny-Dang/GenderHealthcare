import React, { useState, useEffect } from 'react'
import {
  Table,
  Card,
  Space,
  Button,
  Input,
  Rate,
  Popconfirm,
  Typography,
  message,
  Tag,
  Statistic,
  Modal,
  Descriptions,
  Avatar,
  Image,
  Divider,
  Dropdown
} from 'antd'
import { Search, Trash2, Check, X, Eye, User, Calendar, MessageSquare, MoreVertical } from 'lucide-react'
import api from '../../../configs/axios'

const { Title, Text, Paragraph } = Typography
const { Search: SearchInput } = Input

const ManagerFeedbackManagement = () => {
  const [feedbacks, setFeedbacks] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchText, setSearchText] = useState('')
  const [detailModalVisible, setDetailModalVisible] = useState(false)
  const [selectedFeedback, setSelectedFeedback] = useState(null)
  const [stats, setStats] = useState({
    total: 0,
    fiveStars: 0,
    average: 0
  })

  // Fetch data from API
  useEffect(() => {
    fetchFeedbacks()
  }, [])

  const fetchFeedbacks = async () => {
    setLoading(true)
    try {
      console.log('Fetching feedbacks...')
      const response = await api.get('/api/Feedback')
      console.log('Feedback data:', response.data)

      // Transform API response to match component structure
      const transformedFeedbacks = response.data.map((feedback) => ({
        id: feedback.feedbackId,
        customerName: feedback.accountName,
        serviceName: feedback.serviceName,
        rating: feedback.rating,
        comment: feedback.detail,
        date: new Date(feedback.createdAt).toLocaleDateString('vi-VN'),
        createdAt: feedback.createdAt,
        serviceId: feedback.serviceId,
        accountId: feedback.accountId
      }))

      setFeedbacks(transformedFeedbacks)

      // Calculate statistics
      const total = transformedFeedbacks.length
      const fiveStars = transformedFeedbacks.filter((f) => f.rating === 5).length
      const average = total > 0 ? transformedFeedbacks.reduce((acc, curr) => acc + curr.rating, 0) / total : 0

      setStats({
        total,
        fiveStars,
        average: parseFloat(average.toFixed(1))
      })
    } catch (error) {
      console.error('Error fetching feedbacks:', error)
      message.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.')
    } finally {
      setLoading(false)
    }
  }

  const handleSearch = (value) => {
    setSearchText(value)
  }

  const handleDelete = (id) => {
    const feedbackToDelete = feedbacks.find((item) => item.id === id)
    if (!feedbackToDelete) {
      message.error('Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√° n√†y')
      return
    }

    Modal.confirm({
      title: 'X√°c nh·∫≠n xo√°',
      content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° ƒë√°nh gi√° c·ªßa "${feedbackToDelete.customerName}" kh√¥ng?`,
      okText: 'Xo√°',
      okType: 'danger',
      cancelText: 'Hu·ª∑',
      async onOk() {
        try {
          // Ki·ªÉm tra token tr∆∞·ªõc khi g·ªçi API
          const token = localStorage.getItem('token')
          if (!token) {
            message.error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán ch·ª©c nƒÉng n√†y')
            return
          }

          console.log(`üóëÔ∏è Deleting feedback with ID: ${id}`)
          console.log(`URL: ${api.defaults.baseURL}/api/Feedback/${id}`)

          // Hi·ªÉn th·ªã loading message
          const loadingMessage = message.loading('ƒêang xo√° ƒë√°nh gi√°...', 0)

          try {
            // G·ªçi API DELETE v·ªõi headers r√µ r√†ng ƒë·ªÉ ƒë·∫£m b·∫£o token ƒë∆∞·ª£c g·ª≠i ƒëi
            const response = await api.delete(`/api/Feedback/${id}`, {
              headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            })
            console.log('‚úÖ Delete response:', response)

            // ƒê√≥ng loading message
            loadingMessage()

            // C·∫≠p nh·∫≠t danh s√°ch feedback sau khi x√≥a
            const updatedFeedbacks = feedbacks.filter((item) => item.id !== id)
            setFeedbacks(updatedFeedbacks)

            // C·∫≠p nh·∫≠t th·ªëng k√™
            const newTotal = stats.total - 1
            const newFiveStars = feedbackToDelete.rating === 5 ? stats.fiveStars - 1 : stats.fiveStars
            const newAverage = newTotal > 0 ? (stats.average * stats.total - feedbackToDelete.rating) / newTotal : 0

            setStats({
              total: newTotal,
              fiveStars: newFiveStars,
              average: parseFloat(newAverage.toFixed(1))
            })

            message.success('ƒê√£ xo√° ƒë√°nh gi√° th√†nh c√¥ng')
          } catch (apiError) {
            console.error('‚ùå API Error:', apiError)

            if (apiError.response) {
              console.error('Response status:', apiError.response.status)
              console.error('Response data:', apiError.response.data)

              // X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p l·ªói HTTP
              if (apiError.response.status === 401) {
                message.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
                setTimeout(() => {
                  localStorage.removeItem('token')
                  window.location.href = '/login'
                }, 2000)
              } else if (apiError.response.status === 403) {
                message.error('B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ƒë√°nh gi√° n√†y')
              } else if (apiError.response.status === 404) {
                message.error('ƒê√°nh gi√° kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã xo√° tr∆∞·ªõc ƒë√≥')
                // X√≥a kh·ªèi UI n·∫øu kh√¥ng t·ªìn t·∫°i tr√™n server
                setFeedbacks(feedbacks.filter((item) => item.id !== id))
              } else {
                message.error(
                  `L·ªói khi xo√° ƒë√°nh gi√°: ${apiError.response.statusText || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'} (${apiError.response.status})`
                )
              }
            } else if (apiError.request) {
              console.error('No response received:', apiError.request)
              message.error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.')
            } else {
              console.error('Error message:', apiError.message)
              message.error(`L·ªói: ${apiError.message}`)
            }

            loadingMessage() // ƒê·∫£m b·∫£o ƒë√≥ng loading message n·∫øu c√≥ l·ªói
          }
        } catch (error) {
          console.error('‚ùå Unexpected error:', error)
          message.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c kh·ªüi ƒë·ªông l·∫°i backend.')

          // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën x√≥a kh·ªèi UI kh√¥ng
          Modal.confirm({
            title: 'L·ªói k·∫øt n·ªëi',
            content: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. B·∫°n c√≥ mu·ªën x√≥a ƒë√°nh gi√° n√†y kh·ªèi giao di·ªán (ch·ªâ UI)?',
            onOk: () => {
              setFeedbacks(feedbacks.filter((item) => item.id !== id))
              message.warning('ƒê√£ x√≥a ƒë√°nh gi√° kh·ªèi giao di·ªán (d·ªØ li·ªáu tr√™n server kh√¥ng b·ªã ·∫£nh h∆∞·ªüng)')
            }
          })
        }
      }
    })
  }

  const handleUpdateFeedback = async (id, detail, rating) => {
    try {
      await api.put('/api/Feedback', {
        feedbackId: id,
        detail: detail,
        rating: rating
      })

      message.success('C·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng')
      fetchFeedbacks() // Refresh data after update
    } catch (error) {
      console.error('Error updating feedback:', error)
      message.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.')
    }
  }

  const showDetailModal = (feedback) => {
    setSelectedFeedback(feedback)
    setDetailModalVisible(true)
  }

  const closeDetailModal = () => {
    setDetailModalVisible(false)
  }

  const filteredFeedbacks = feedbacks.filter(
    (item) =>
      item.customerName.toLowerCase().includes(searchText.toLowerCase()) ||
      item.comment.toLowerCase().includes(searchText.toLowerCase()) ||
      item.serviceName.toLowerCase().includes(searchText.toLowerCase())
  )

  const columns = [
    {
      title: 'Kh√°ch h√†ng',
      dataIndex: 'customerName',
      key: 'customerName',
      render: (text) => <a>{text}</a>
    },
    {
      title: 'D·ªãch v·ª•',
      dataIndex: 'serviceName',
      key: 'serviceName'
    },
    {
      title: 'ƒê√°nh gi√°',
      dataIndex: 'rating',
      key: 'rating',
      render: (rating) => <Rate disabled defaultValue={rating} />,
      sorter: (a, b) => a.rating - b.rating
    },
    {
      title: 'Nh·∫≠n x√©t',
      dataIndex: 'comment',
      key: 'comment',
      ellipsis: true
    },
    {
      title: 'Ng√†y',
      dataIndex: 'date',
      key: 'date',
      sorter: (a, b) => new Date(a.date) - new Date(b.date)
    },
    {
      title: 'H√†nh ƒë·ªông',
      key: 'action',
      width: 180,
      render: (_, record) => (
        <Space size='middle'>
          <Button type='default' size='small' icon={<Eye size={14} />} onClick={() => showDetailModal(record)}>
            Chi ti·∫øt
          </Button>
          <Popconfirm
            title='X√≥a ƒë√°nh gi√° n√†y?'
            description='B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë√°nh gi√° n√†y kh√¥ng?'
            onConfirm={() => handleDelete(record.id)}
            okText='C√≥'
            cancelText='Kh√¥ng'
          >
            <Button danger size='small' icon={<Trash2 size={14} />}>
              X√≥a
            </Button>
          </Popconfirm>
        </Space>
      )
    }
  ]

  return (
    <div>
      <div className='flex justify-between items-center mb-6'>
        <Title level={4}>Qu·∫£n l√Ω Feedback</Title>
        <Space>
          <Button type='primary' onClick={fetchFeedbacks}>
            L√†m m·ªõi
          </Button>
          <SearchInput
            placeholder='T√¨m ki·∫øm ƒë√°nh gi√°...'
            onSearch={handleSearch}
            style={{ width: 300 }}
            prefix={<Search size={16} />}
            onChange={(e) => setSearchText(e.target.value)}
          />
        </Space>
      </div>

      <div className='grid grid-cols-3 gap-4 mb-6'>
        <Card>
          <Statistic title='T·ªïng s·ªë ƒë√°nh gi√°' value={stats.total} valueStyle={{ color: '#1677ff' }} />
        </Card>
        <Card>
          <Statistic title='ƒê√°nh gi√° 5 sao' value={stats.fiveStars} valueStyle={{ color: '#3f8600' }} />
        </Card>
        <Card>
          <Statistic
            title='ƒê√°nh gi√° trung b√¨nh'
            value={stats.average}
            precision={1}
            valueStyle={{ color: '#722ed1' }}
            suffix='/ 5'
          />
        </Card>
      </div>

      <Table
        columns={columns}
        dataSource={filteredFeedbacks}
        rowKey='id'
        loading={loading}
        pagination={{
          pageSize: 10,
          showTotal: (total, range) => `${range[0]}-${range[1]} c·ªßa ${total} ƒë√°nh gi√°`
        }}
        scroll={{ x: 'max-content' }}
      />

      {/* Chi ti·∫øt ƒë√°nh gi√° Modal */}
      <Modal
        title='Chi ti·∫øt ƒë√°nh gi√°'
        open={detailModalVisible}
        onCancel={closeDetailModal}
        footer={[
          <Button key='back' onClick={closeDetailModal}>
            ƒê√≥ng
          </Button>
        ]}
        width={700}
      >
        {selectedFeedback && (
          <div>
            <div className='flex items-center mb-4'>
              <Avatar size={64} icon={<User />} className='mr-4' style={{ backgroundColor: '#1677ff' }} />
              <div>
                <Title level={4} style={{ margin: 0 }}>
                  {selectedFeedback.customerName}
                </Title>
                <div className='flex items-center'>
                  <Rate disabled value={selectedFeedback.rating} />
                  <Text type='secondary' className='ml-2'>
                    ({selectedFeedback.rating}/5)
                  </Text>
                </div>
              </div>
            </div>

            <Descriptions bordered column={1}>
              <Descriptions.Item label='D·ªãch v·ª•'>{selectedFeedback.serviceName}</Descriptions.Item>
              <Descriptions.Item label='Th·ªùi gian'>
                <div className='flex items-center'>
                  <Calendar size={16} className='mr-2' />
                  {new Date(selectedFeedback.createdAt).toLocaleString('vi-VN')}
                </div>
              </Descriptions.Item>
            </Descriptions>

            <Divider orientation='left'>N·ªôi dung ƒë√°nh gi√°</Divider>
            <div className='bg-gray-50 p-4 rounded-lg'>
              <div className='flex items-start'>
                <MessageSquare size={20} className='mr-2 mt-1 text-blue-500' />
                <Paragraph style={{ margin: 0 }}>{selectedFeedback.comment}</Paragraph>
              </div>
            </div>

            <Divider />

            <div className='flex justify-end'>
              <Button
                danger
                icon={<Trash2 size={14} />}
                onClick={() => {
                  handleDelete(selectedFeedback.id)
                  closeDetailModal()
                }}
              >
                X√≥a ƒë√°nh gi√°
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </div>
  )
}

export default ManagerFeedbackManagement
